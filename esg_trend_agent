# esg_trend_agent.py ‚Äî Agentic ESG Risk Monitor with History Tracking

import pandas as pd
import numpy as np
import joblib
import datetime
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import os
from transformers import pipeline
from newsapi import NewsApiClient
from fuzzywuzzy import fuzz

# === Settings ===
MODEL_PATH = "esg_model.pkl"
DATA_PATH = "merged_esg_data.csv"
HISTORY_FILE = "esg_score_history.csv"
DELTA_LOG_FILE = "delta_log.csv"
ALERT_THRESHOLD = 10.0  # Risk difference needed to trigger alert
TOP_N = 3  # Companies to include in alert

# === Load FinBERT sentiment model ===
finbert = pipeline("text-classification", model="ProsusAI/finbert")

# === Load model and data ===
model = joblib.load(MODEL_PATH)
df = pd.read_csv(DATA_PATH)

# === Clean and prepare ===
df = df.dropna(subset=["Environment Risk Score", "Governance Risk Score", "Social Risk Score", "Total ESG Risk score"])
df["Controversy Score"] = df.get("Controversy Score", 0)
df["ESG Risk Percentile"] = (
    df["ESG Risk Percentile"].astype(str).str.extract(r'(\d+)').astype(float).fillna(50.0)
)

# === Generate sentiment scores from FinBERT for each company ===
df["Clean Name"] = df["Name"].str.lower().str.replace(r'[^\w\s]', '', regex=True)

# Initialize NewsAPI
newsapi = NewsApiClient(api_key=os.getenv("NEWS_API_KEY", ""))
df["News Sentiment Score"] = 0.0
sentiment_coverage = 0

for idx, row in df.iterrows():
    name = row["Clean Name"]
    try:
        articles = newsapi.get_everything(q=name, language='en', sort_by='relevancy', page_size=5)
        headlines = [article['title'] for article in articles['articles']]
        sentiments = [finbert(h)[0]['label'] for h in headlines if h]
        if sentiments:
            avg = sum({"positive": 1, "neutral": 0, "negative": -1}[s] for s in sentiments) / len(sentiments)
            df.at[idx, "News Sentiment Score"] = avg
            sentiment_coverage += 1
    except:
        continue

print(f"‚úÖ Sentiment coverage: {sentiment_coverage / len(df) * 100:.0f}%")

# === Predict ===
features = ["Environment Risk Score", "Governance Risk Score", "Social Risk Score",
            "Controversy Score", "ESG Risk Percentile", "News Sentiment Score"]
X = df[features]
df["Predicted ESG Risk Score"] = model.predict(X)

# === Add full timestamp ===
timestamp = datetime.datetime.now()
df["Timestamp"] = timestamp.strftime("%Y-%m-%d %H:%M:%S")
df["Date"] = timestamp.date()

# === Append to history ===
try:
    history_df = pd.read_csv(HISTORY_FILE)
    full_history = pd.concat([history_df, df], ignore_index=True)
except FileNotFoundError:
    print("üéí No previous history file found. Creating new history.")
    full_history = df.copy()

# Save updated history
full_history.to_csv(HISTORY_FILE, index=False)

# === Compare scores based on full history ===
try:
    full_history["Timestamp"] = pd.to_datetime(full_history["Timestamp"])
except Exception as e:
    print("‚ùå Error parsing Timestamp column:", e)
    exit()

if full_history["Timestamp"].nunique() < 2:
    print("‚ÑπÔ∏è Not enough entries to compare.")
else:
    deltas = []
    for symbol in full_history["Symbol"].unique():
        symbol_scores = full_history[full_history["Symbol"] == symbol].sort_values("Timestamp")
        if len(symbol_scores) >= 2:
            latest = symbol_scores.iloc[-1]
            previous = symbol_scores.iloc[-2]
            delta = latest["Predicted ESG Risk Score"] - previous["Predicted ESG Risk Score"]
            deltas.append({
                "Symbol": symbol,
                "Previous Timestamp": previous["Timestamp"],
                "Latest Timestamp": latest["Timestamp"],
                "Previous Score": previous["Predicted ESG Risk Score"],
                "Latest Score": latest["Predicted ESG Risk Score"],
                "Delta": delta
            })

    delta_df = pd.DataFrame(deltas)
    if not delta_df.empty:
        delta_df.to_csv(DELTA_LOG_FILE, mode='a', index=False, header=not os.path.exists(DELTA_LOG_FILE))

        for _, row in delta_df.iterrows():
            full_history.loc[
                (full_history["Symbol"] == row["Symbol"]) &
                (full_history["Timestamp"] == row["Latest Timestamp"]),
                "Delta"
            ] = row["Delta"]

        full_history.to_csv(HISTORY_FILE, index=False)

        risk_alerts = delta_df[delta_df["Delta"].abs() >= ALERT_THRESHOLD].sort_values("Delta", ascending=False).head(TOP_N)

        if risk_alerts.empty:
            print("‚úÖ No significant ESG risk differences found.")
        else:
            print("üì§ Sending alert email...")

            sender = "xxx"
            receiver = "abc"
            password = "yyy!"

            msg = MIMEMultipart("alternative")
            msg["Subject"] = "üö® ESG Risk Alert: Significant Differences Detected"
            msg["From"] = sender
            msg["To"] = receiver

            text_body = f"Significant ESG Risk Score changes (Œî > {ALERT_THRESHOLD}):\n\n"
            for _, row in risk_alerts.iterrows():
                text_body += f"{row['Symbol']}: {row['Previous Score']:.2f} ‚Üí {row['Latest Score']:.2f} (Œî {row['Delta']:.2f})\n"

            msg.attach(MIMEText(text_body, "plain"))

            try:
                with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
                    server.login(sender, password)
                    server.sendmail(sender, receiver, msg.as_string())
                print("‚úÖ Email sent successfully!")
            except Exception as e:
                print("‚ùå Failed to send email:", e)
